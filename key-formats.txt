SSH Key File Formats

Author: James Commons
Date: October 2, 2024

========== Private Key ========== 

Items expected to be in the private key file:
- The integers n and d
- Perhaps some other numbers to make computations more efficient
- Version numbers or other indicators of the specific cryptosystem being used

More specifically, we expect the following to be in the file:

RSAPrivateKey ::= SEQUENCE {
       version           Version,
       modulus           INTEGER,  -- n
       publicExponent    INTEGER,  -- e
       privateExponent   INTEGER,  -- d
       prime1            INTEGER,  -- p
       prime2            INTEGER,  -- q
       exponent1         INTEGER,  -- d mod (p-1)
       exponent2         INTEGER,  -- d mod (q-1)
       coefficient       INTEGER,  -- (inverse of q) mod p
       otherPrimeInfos   OtherPrimeInfos OPTIONAL
}

Decoding the private key:

I used Lapo Luchini's ASN.1 decoder to decode the base64 contents of
my RSA file into a human-readable format.

The contents:

The first integer was called version, and it has a value of 0. From RFC 8017,
this means that we are using the two prime version of RSA as opposed to a 
multiprime version. This would be indicated by having the version integer be
1 instead.

The next integer is called modulus, and it represents n from the RSA algorithm.
It is a 3072 bit integer whose value is

521311451072993875679216277692878144120666473466275668933003037235692844199607
129691968606412686891885995730560942988010633010497687819736964837852382941725
630330325489840540291758842705973547669738366448647051100003547488912318368876
239699154636855433235144137961148052579880150226101582976140215056149923394410
260674497989093122626423429880225477458063101550892500941422669628494217946040
568016829671759625475717054600536372050878827830741198412646258123900072766963
138170277911069947133056417211780087063830941293896545904202532230011648619104
910952305719358201742036017811180632896900965053437230355054662190310266270179
461604110156318356136869463956873076688787898343475268164947784651413807132940
022795872670159329486489598425406261320561205190888048749209204591345616202112
422067189590562658831339894344848390708123069912471204334613506660863516654879
5017743291416043875325485391588802761698851837205709753760043098437.

The next integer is called publicExponent, and it represents e (the public key)
from the RSA algorithm. It has a value of 65537.

The next integer is called privateExponent, and it represents d (the private
key). It is another long one, at 3070 bits. It has a value of

948092098408382135926358974902942551501323480971747211195578558800711508005419
439217323621745398029264260358660890714268082892430526439026028640670545231308
694006004167631933066431732641484766570885391412701863384186380597272673854255
748809714225045380278267693113649333765596763743367070127197647627180209185342
004818551586432233484038155659002924427827655734178817877049117186020505012261
398933822551795623242606706712817647813361116455529600665323519626892436617438
000240742831885071194438160271656893610741949002641947680789426848367380922701
551927797804623055123781913345623432260134908081920722496990456205775483356836
652713134182135398545615429848657232697892662147838904380046133233541699632631
585063916934792441561160408893040558227092696951584423011989750745274034312518
925998697335976778909492560274425688811476500436692036490097108803790430417118
522293410864821230259129785667678540427584040536345312120555249185

The next integer is called prime1, and it represents p. It is a 1536 bit
integer with a value of

240181807501635270846211649751389783347098721279547006711918091801986695126781
075012624550044395661169901703715236247294297097391345199538552436843954166696
853706865944791401735156957566830532251878826257860691527276274221059892059574
708854445200187962444695467921561397154295210124726538266674317733397320487410
126694808553310507397202419488172043457188303242663046826312696822622595828312
4483579003236960303806750719627971151051350012222577738355564263785136413

The next integer is called prime2, and it represents q. It is a 1536 bit
integer with a value of

217048683451782476004825248638581336281148116297554940040191826530114564489255
130877321986688836730162441496030614767864314775790580753520393227235734608978
823662765062283140063460824709140463874079318006240360372203012841974077865664
852781137706986627712182113259120863949599598741084071566014661891343015526178
331986513143238699677662474512902579056808851413375997958961648265804614795977
4404615578602038147408786029417386600797933710072898645937735058399973449

Finally, there are three other integers, exponent1, exponent2, and coefficient.
These are just there for efficient computation.

========== Public Key ==========

For the public key, we only expect it to contain the modulus n and the public
exponent e. We shouldn't expect any thing else because all the other fields in
the private key that made computations faster also let attackers break the
encryption fairly easily. We only want to publish e and n, which is all that
the public key contains.

To decode, I used a different method because this is in a different format,
not PEM. The format is structured as a string and two integers. Each field
is preceded by 4 bytes that indicate the length of the data in bytes. So,
all I did was run base64 -d <PUBLIC KEY BASE64 STUFF> | hexdump -C. The first
4 bytes ended up being 7, meaning that the following 7 bytes made up the first
string, which turned out to be "ssh-rsa". The next 4 bytes were a 3, followed
by 0x010001, which corresponds to 65537 in hexidecimal. The next 4 bytes
contained 0x181, or decimal 385, which was the length of n. The remaining bytes
correspond to n. The value was (in hexadecimal)

               0x 00 e5  b7 33 ad fb 41 d1 66 2c
f1 ce c5 e3 ee 21 f7 d8  ac 18 2c ce 10 82 fd 79
c3 88 e6 fa 09 0f 38 62  00 49 e6 b1 59 0e f5 ac
03 9c d0 8d 7e 91 46 b5  26 ec ad 44 fc db f4 7b
f7 d3 8c ba 38 fd e8 da  5a 81 73 09 bc f9 c2 19
ff de a8 11 67 88 0b 3f  cc 22 17 61 6a 6b f2 82
3f cf 5b 44 76 06 a2 5b  72 30 9f fd 48 4c 17 fb
84 70 fd 65 4e 2d f0 12  ce df 15 72 b4 4c 81 4b
52 ed e4 c1 d3 49 ca ac  83 72 45 e3 59 2a 23 f2
a3 16 6e 4e a3 45 06 e0  5b 2e d0 e2 73 8d e3 16
68 25 78 a1 d9 b1 02 c0  f4 02 99 0a a6 db 55 92
e4 b5 68 b6 bd db 1b a4  61 19 f3 92 9e c0 7c a2
b9 af c0 47 04 11 c4 31  ce b8 77 a4 0f 49 05 67
bb d0 d5 fe 9a 32 ea a2  3d 7e 54 8a ee 89 bd ef
5d c4 db da 26 3a 4f 23  5a 2f 9c b9 32 f4 59 ca
e3 0b 38 c1 35 ca d9 17  e1 87 82 41 4a 41 73 b5
88 7e 06 3f d6 30 54 4b  09 0f 92 1c 6c 28 14 af
7e f7 d5 0b bd 45 50 b2  2f fe 5b e9 5a 8a b2 8b
4e ba e7 68 2d 91 cc 9b  6f c5 dd f8 28 b2 ea eb
3a ff ae 2a 82 89 c2 d8  61 88 a4 cc 4a 32 da ed
68 42 42 4a 3a 24 bf b4  9c ec a0 48 0b f4 7e b5
0a ab a9 a3 39 d3 e2 48  39 10 22 c5 c9 2c 8b 47
f2 9b 7d 73 33 7b e9 02  c7 d8 38 ac 78 71 8e 1d
d0 90 21 2b fa 3a 13 27  db 49 d4 43 86 e6 b3 dc
d5 e0 01 b8 91 e1 45

I checked with python, and this is indeed the same integer as n from the
private key.

========== Sanity Check ========== 

The first thing we should see is if p * q = n. The other sanity check we can
perform, which will hopefully confirm that all our values are correct, is that
e * d mod lambda = 1.

I ran the following python code, and the program output true in both cases.

import math

n = 5213114510729938756792162776928781441206664734662756689330030372356928441996071296919686064126868918859957305609429880106330104976878197369648378523829417256303303254898405402917588427059735476697383664486470511000035474889123183688762396991546368554332351441379611480525798801502261015829761402150561499233944102606744979890931226264234298802254774580631015508925009414226696284942179460405680168296717596254757170546005363720508788278307411984126462581239000727669631381702779110699471330564172117800870638309412938965459042025322300116486191049109523057193582017420360178111806328969009650534372303550546621903102662701794616041101563183561368694639568730766887878983434752681649477846514138071329400227958726701593294864895984254062613205612051908880487492092045913456162021124220671895905626588313398943448483907081230699124712043346135066608635166548795017743291416043875325485391588802761698851837205709753760043098437

p = 2401818075016352708462116497513897833470987212795470067119180918019866951267810750126245500443956611699017037152362472942970973913451995385524368439541666968537068659447914017351569575668305322518788262578606915272762742210598920595747088544452001879624446954679215613971542952101247265382666743177333973204874101266948085533105073972024194881720434571883032426630468263126968226225958283124483579003236960303806750719627971151051350012222577738355564263785136413

q = 2170486834517824760048252486385813362811481162975549400401918265301145644892551308773219866888367301624414960306147678643147757905807535203932272357346089788236627650622831400634608247091404638740793180062403603722030128419740778656648527811377069866277121821132591208639495995987410840715660146618913430155261783319865131432386996776624745129025790568088514133759979589616482658046147959774404615578602038147408786029417386600797933710072898645937735058399973449

e = 65537

d = 948092098408382135926358974902942551501323480971747211195578558800711508005419439217323621745398029264260358660890714268082892430526439026028640670545231308694006004167631933066431732641484766570885391412701863384186380597272673854255748809714225045380278267693113649333765596763743367070127197647627180209185342004818551586432233484038155659002924427827655734178817877049117186020505012261398933822551795623242606706712817647813361116455529600665323519626892436617438000240742831885071194438160271656893610741949002641947680789426848367380922701551927797804623055123781913345623432260134908081920722496990456205775483356836652713134182135398545615429848657232697892662147838904380046133233541699632631585063916934792441561160408893040558227092696951584423011989750745274034312518925998697335976778909492560274425688811476500436692036490097108803790430417118522293410864821230259129785667678540427584040536345312120555249185

la = math.lcm(p - 1, q - 1)

print(p * q == n)
print((e * d) % la == 1)

